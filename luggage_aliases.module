<?php
/**
 * @file
 * Code for the luggage_aliases feature.
 */

include_once 'luggage_aliases.features.inc';
include_once 'luggage_aliases.views_default.inc';

const LUGGAGE_ALIASES_VOCAB_NAME = 'aliases';

/**
 * Implements hook_FORM_ID_form_alter()
 */
function luggage_aliases_form_people_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_people_aliases']['#access'] = false;
}

/**
 * Implements hook_node_presave().
 */
function luggage_aliases_node_presave($node) {
  // Maintain people node alias mapping.
  if ($node->type == 'people') {
    // If there is no alias term for this node, create one.
    if (empty($node->field_people_aliases[LANGUAGE_NONE][0]['tid'])) {
      $term_name = _luggage_aliases_assemble_term_name($node);
      if (!empty($term_name)) {
        $term = _luggage_aliases_generate_term($term_name);
        $node->field_people_aliases[LANGUAGE_NONE][0]['tid'] = $term->tid;
      }
    }
    // Otherwise check if the term name needs updated.
    else {
      // Make sure we're updating a node and not creating a new one.
      if (isset($node->original)) {
        // Get the original node term name from the taxonomy term.
        $original_term = taxonomy_term_load($node->original->field_people_aliases['und'][0]['tid']);
        $original_term_name = $original_term->name;

        $new_term_name = _luggage_aliases_assemble_term_name($node);

        if ($original_term_name != $new_term_name) {
          // Update the term name
          $term = taxonomy_term_load($node->field_people_aliases[LANGUAGE_NONE][0]['tid']);
          $term->name = $new_term_name;
          taxonomy_term_save($term);
          watchdog('luggage_aliases', "Updated alias term %tid name from %original to %new", array('%tid' => $term->tid, '%original' => $original_term_name, '%new' => $new_term_name), WATCHDOG_INFO);
        }
      }
    }
  }
}

/**
 * Helper function to generate a consistent alias term name from node values.
 *
 * WARNING: If this format will be changed. All nodes in the system will need
 * to be updated.
 *
 * @param $node - A node object that has the expected fields to generate the
 * combined name.
 */
function _luggage_aliases_assemble_term_name($node) {
  $term_name = '';

  // Title
  if (!empty($node->field_people_title[LANGUAGE_NONE][0]['value'])) {
    // Get the labe for the value of the title field.
    $title = $node->field_people_title[LANGUAGE_NONE][0]['value'];
    $field = field_info_field('field_people_title');
    $term_name .= $field['settings']['allowed_values'][$title];
  }

  // First Name
  if (!empty($node->field_people_first_name[LANGUAGE_NONE][0]['value'])) {
    $term_name .= trim($node->field_people_first_name[LANGUAGE_NONE][0]['value']) . ' ';
  }

  // Middle Initial
  if (!empty($node->field_people_middle_initial[LANGUAGE_NONE][0]['value'])) {
    $term_name .= trim($node->field_people_middle_initial[LANGUAGE_NONE][0]['value']) . ' ';
  }

  // Last Name
  if (!empty($node->field_people_last_name[LANGUAGE_NONE][0]['value'])) {
    $term_name .= trim($node->field_people_last_name[LANGUAGE_NONE][0]['value']) . ' ';
  }

  return trim($term_name);
}

/**
 * Helper function to populate alias vocabulary on people nodes.
 * Called from hook_install() and hook_update_7100().
 */
function luggage_aliases_update_people_nodes() {
  // Check that the alias field on people content type exists.
  //return;
  $field_instance = field_info_instance('node', 'field_people_aliases', 'people');

  if ($field_instance != NULL) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'people');

    $result = $query->execute();

    if (isset($result['node'])) {
      // Include the .module in case this is run during a hook_update().
      //include_once('luggage_aliases.module');

      $nids = array_keys($result['node']);
      $entities = entity_load('node', $nids);

      foreach ($entities as $entity) {
        node_save($entity);
      }
    }
  }
  else {
    drupal_set_message('Unable to update aliases: field_people_aliases wasn\'t found on the people content type.', 'warning');
    watchdog('luggage_aliases', 'Unable to update aliases, field not found', NULL,WATCHDOG_ERROR);
  }
}

/**
 * @param $nid
 * @param $term_name
 *
 * @return The newly created term object.
 */
function _luggage_aliases_generate_term($term_name) {
  $vocabulary = taxonomy_vocabulary_machine_name_load('aliases');

  $term = new stdClass();
  $term->name = trim($term_name);
  $term->vid = $vocabulary->vid;

  taxonomy_term_save($term);

  return $term;
}

/**
 * Implements hook_field_formatter_info()
 */
function luggage_aliases_field_formatter_info() {
  $info = array(
    'author_list' => array(
      'label' => t('Author List'),
      'field types' => array('taxonomy_term_reference'),
      'description' => t('Displays the author\'s profile image, name, & bio.'),
    ),
    'views_node_author' => array(
      'label' => t('Views Node Author'),
      'field types' => array('taxonomy_term_reference'),
      'description' => t('Displays the author\'s profile image, name, & bio.'),
    ),
    'views_blog_hero' => array(
      'label' => t('Views Blog Hero Display'),
      'field types' => array('taxonomy_term_reference'),
      'description' => t('Displays the blog author\'s profile image, name, & bio in a big way.'),
    ),
  );
  return $info;
}

function _luggage_aliases_get_person_by_tid($tid) {
  $query = db_select('taxonomy_index','t')->fields('t');
  $query->condition('t.tid',$tid,'=');
  $nodes = db_select('node','n')->fields('n')->condition('type','people');
  $query->join($nodes,'n','t.nid = n.nid');
  $data = $query->execute()->fetchCol();
  return ($data) ? node_load($data[0]) : Null;
}

/**
 * Implements hook_field_formatter_view()
 */
function luggage_aliases_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'author_list':
      foreach ($items as $delta => $item) {
        $user = _luggage_aliases_get_person_by_tid($item['tid']);
        if($user) {
          $element[$delta] = array(
            '#theme' => 'luggage_aliases_default',
            '#image_src' => (isset($user->field_people_image[LANGUAGE_NONE][0]))?image_style_url('thumbnail',$user->field_people_image[LANGUAGE_NONE][0]['uri']) : '',
            '#firstname' => $user->field_people_first_name[LANGUAGE_NONE][0]['value'],
            '#lastname' => $user->field_people_last_name[LANGUAGE_NONE][0]['value'],
            '#position' => $user->field_people_position[LANGUAGE_NONE][0]['value'],
            '#url' => $user->nid,
            '#bio' => (isset($user->field_people_bio[LANGUAGE_NONE][0]['value'])) ? filter_dom_serialize(filter_dom_load(substr($user->field_people_bio[LANGUAGE_NONE][0]['value'],0,300) . '...')) : '',
          );
        } else {
          $term = taxonomy_term_load($item['tid']);
          if($term) {
            $element[$delta] = array(
              '#theme' => 'luggage_aliases_default',
              '#aliasName' => $term->name,
              '#url' => '/authors/' . $term->tid,
            );
          }
        }
      }
      drupal_add_css(drupal_get_path('module', 'luggage_aliases') . '/css/luggage_aliases.css');
      break;
    case 'views_node_author':
      foreach ($items as $delta => $item) {
        $user = _luggage_aliases_get_person_by_tid($item['tid']);
        $term = taxonomy_term_load($item['tid']);
        if ($user && $term) {
          $element[$delta] = array(
            '#theme' => 'luggage_aliases_views_node_author',
            '#image_src' => (isset($user->field_people_image[LANGUAGE_NONE][0]))?image_style_url('aliases_avatar',$user->field_people_image[LANGUAGE_NONE][0]['uri']) : '',
            '#name' => trim($user->title),
            '#url' => url('blog/' . strtolower(str_replace(' ', '-', trim($term->name)))),
            '#created' => format_date($entity->created),
          );
        } else {
          if($term) {
            $element[$delta] = array(
              '#theme' => 'luggage_aliases_views_node_author',
              '#aliasName' => $term->name,
              '#url' => '/authors/' . $term->tid,
              '#created' => format_date($entity->created),
            );
          }
        }
      }
      drupal_add_css(drupal_get_path('module', 'luggage_aliases') . '/css/luggage_aliases.css');
      break;
    case 'views_blog_hero':
      foreach($items as $delta => $item) {
        $user = _luggage_aliases_get_person_by_tid($item['tid']);
      }
  }
  return $element;
}

/**
 * Implements hook_theme()
 */
function luggage_aliases_theme() {
  return array(
    'luggage_aliases_default' => array(
      'template' => 'luggage_aliases_default',
      'variables' => array(
        'image_src' => Null,
        'firstname' => Null,
        'lastname' => Null,
        'position' => Null,
        'url' => Null,
        'bio' => Null,
        'aliasName' => Null,
      ),
      'path' => drupal_get_path('module','luggage_aliases') . '/templates'
    ),
    'luggage_aliases_views_node_author' => array(
      'template' => 'luggage_aliases_views_node_author',
      'variables' => array(
        'image_src' => Null,
        'name' => Null,
        'url' => Null,
        'aliasName' => Null,
        'created' => Null,
      ),
      'path' => drupal_get_path('module','luggage_aliases') . '/templates'
    ),
  );
}

/**
 * Implements hook_views_pre_view()
 */
function luggage_aliases_views_pre_view(&$view, &$display_id, &$args) {
  // Grab the views config provided by features which is needed to check the
  // display id
  $views = luggage_aliases_views_default_views();
  // Confirm that this is the right view
  if(isset($views[$view->name]) && isset($views[$view->name]->display[$display_id]) && arg(0) == 'node') {
    // Get the author's aliases
    $node = node_load(arg(1));
    // Build up the contextual filter array
    foreach($node->field_people_aliases[LANGUAGE_NONE] as $value) {
      $args[] = $value['tid'];
    }
  }
}
