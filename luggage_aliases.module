<?php
/**
 * @file
 * Code for the luggage_aliases feature.
 */

include_once 'luggage_aliases.features.inc';
include_once 'luggage_aliases.views_default.inc';

const LUGGAGE_ALIASES_VOCAB_NAME = 'aliases';

/**
 * Implements hook_FORM_ID_form_alter()
 */
function luggage_aliases_form_people_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_people_aliases']['#access'] = false;
}

function luggage_aliases_node_update($node) {
  if ($node->type == 'people') {
    // For aliases we want the default or zero index term to match the node title
    // Therefore we need to determine if the user's title has changed.
    $new_title = $node->title;
    $default_alias = $node->field_people_aliases[LANGUAGE_NONE][0];
    $original_title = $default_alias['name'];
    if ($new_title != $original_title) {
      // Then load and update the term
      $term = taxonomy_term_load($default_alias['tid']);
      if ($term) {
        // Update the term entry
        $term->name = $new_title;
        taxonomy_term_save($term);

        // Update the people node
        $node->field_people_aliases[LANGUAGE_NONE][0] = (array)$term;
        field_attach_update('node', $node);
      } else {
        // No term, this should never happen
        // TODO: handle null return
      }
    }
  }
}

function _luggage_aliases_getTermName($form_state) {
  $first_name = $form_state['values']['field_people_first_name'][LANGUAGE_NONE][0]['value'];
  $middle_name = $form_state['values']['field_people_middle_initial'][LANGUAGE_NONE][0]['value'];
  $title = $form_state['values']['field_people_title'][LANGUAGE_NONE][0]['value'] . ' ' .  $form_state['values']['field_people_first_name'][LANGUAGE_NONE][0]['value'] . ' ' . $form_state['values']['field_people_middle_initial'][LANGUAGE_NONE][0]['value'] . ' ' . $form_state['values']['field_people_last_name'][LANGUAGE_NONE][0]['value'];
  return trim($title);
}

function _luggage_aliases_createTerm($name) {
  $term = new stdClass();
  $term->vid = _luggage_aliases_get_vocab_id(LUGGAGE_ALIASES_VOCAB_NAME)->vid;
  $term->name = $name;
  $term->description = '';
  taxonomy_term_save($term);
  return $term;
}

/**
 * @param $vocab_machine_name
 * @return null or vocabulary object
 */
function _luggage_aliases_get_vocab_id($vocab_machine_name) {
  $vocabularies = taxonomy_get_vocabularies();
  $vocab = Null;
  foreach($vocabularies as $v) {
    if($v->machine_name == $vocab_machine_name) {
      $vocab = $v;
      break;
    }
  }
  return $vocab;
}

/**
 * Implements hook_field_formatter_info()
 */
function luggage_aliases_field_formatter_info() {
  $info = array(
    'author_list' => array(
      'label' => t('Author List'),
      'field types' => array('taxonomy_term_reference'),
      'description' => t('Displays Title as a link and URL as plain text.'),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view()
 */
function luggage_aliases_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'author_list':
      foreach ($items as $delta => $item) {
        $query = db_select('taxonomy_index','t')->fields('t');
        $query->condition('t.tid',$item['tid'],'=');
        $nodes = db_select('node','n')->fields('n')->condition('type','people');
        $d = $query->join($nodes,'n','t.nid = n.nid');
        $data = $query->execute()->fetchCol();
        if($data) {
          $user = node_load($data[0]);
          $element[$delta] = array(
            '#theme' => 'luggage_aliases_default',
            '#image_src' => image_style_url('thumbnail',$user->field_people_image[LANGUAGE_NONE][0]['uri']),
            '#firstname' => $user->field_people_first_name[LANGUAGE_NONE][0]['value'],
            '#lastname' => $user->field_people_last_name[LANGUAGE_NONE][0]['value'],
            '#position' => $user->field_people_position[LANGUAGE_NONE][0]['value'],
            '#url' => $user->nid,
            '#bio' => (isset($user->field_people_bio[LANGUAGE_NONE][0]['value']))?substr($user->field_people_bio[LANGUAGE_NONE][0]['value'],0,300) . '...':'',
          );
        } else {
          $term = taxonomy_term_load($item['tid']);
          if($term) {
            $element[$delta] = array(
              '#theme' => 'luggage_aliases_default',
              '#aliasName' => $term->name,
              '#url' => '/authors/' . $term->tid,
            );
          }
        }
      }
      drupal_add_css(drupal_get_path('module', 'luggage_aliases') . '/css/luggage_aliases.css');
      break;
  }
  return $element;
}

/**
 * Implements hook_theme()
 */
function luggage_aliases_theme() {
  return array(
    'luggage_aliases_default' => array(
      'template' => 'luggage_aliases_default',
      'variables' => array(
        'image_src' => Null,
        'firstname' => Null,
        'lastname' => Null,
        'position' => Null,
        'url' => Null,
        'bio' => Null,
        'aliasName' => Null,
      ),
      'path' => drupal_get_path('module','luggage_aliases') . '/templates'
    )
  );
}

/**
 * Implements hook_views_pre_view()
 */
function luggage_aliases_views_pre_view(&$view, &$display_id, &$args) {
  // Grab the views config provided by features which is needed to check the
  // display id
  $views = luggage_aliases_views_default_views();
  // Confirm that this is the right view
  if(isset($views[$view->name]) && isset($views[$view->name]->display[$display_id]) && arg(0) == 'node') {
    // Get the author's aliases
    $node = node_load(arg(1));
    // Build up the contextual filter array
    foreach($node->field_people_aliases[LANGUAGE_NONE] as $value) {
      $args[] = $value['tid'];
    }
  }
}